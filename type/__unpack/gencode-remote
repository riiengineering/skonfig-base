#!/bin/sh -e
#
# 2020 Ander Punnar (ander at kvlt.ee)
# 2021,2023 Dennis Camera (dennis.camera at riiengineering.ch)
# 2022 Travis Paul (tr at vispaul.me)
#
# This file is part of skonfig-base.
#
# skonfig-base is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-base is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-base. If not, see <http://www.gnu.org/licenses/>.
#

quote() { printf '%s\n' "$*" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/"; }

if grep -q -x -e 'missing' -e 'match' "${__object:?}/explorer/state"
then
    exit 0
fi

os=$(cat "${__global:?}/explorer/os")

src="/${__object_id:?}"

dst=$(sed 's/\/$//' "${__object:?}/parameter/destination")

cmdline="mkdir -p $(shquot "${dst}") && cd $(shquot "${dst}") && "

f=${src}
while :
do
    case ${f}
    in
        # https://git.savannah.gnu.org/cgit/tar.git/tree/src/suffix.c?h=release_1_34#n29
        (*.tar|*.tgz|*.tar.*|*.txz|*.tbz2)
            # NOTE: make sure the options work with all tar implementations (e.g. BusyBox)
            if ${cmd_stdout?}
            then
                cmd=" | tar x"
            else
                cmd="tar xf $(shquot "${src}")"
            fi

            if test -s "${__object:?}/parameter/tar-strip"
            then
                tar_strip=$(cat "${__object:?}/parameter/tar-strip")

                cmd="${cmd:?} --strip-components=${tar_strip}"
            fi

            if test -s "${__object:?}/parameter/tar-extra-args"
            then
                tar_extra_args=$(cat "${__object:?}/parameter/tar-extra-args")

                cmd="${cmd:?} ${tar_extra_args}"
            fi
            cmd_stdout=false
            cmdline=${cmdline:?}${cmd:?}
            break
            ;;
        (*.7z)
            case ${os}
            in
                (alpine)
                    bin_7z='7z'
                ;;
                (centos|almalinux|eurolinux|rocky|fedora|redhat)
                    bin_7z='7za'
                ;;
                (*)
                    bin_7z='7zr'
                ;;
            esac

            cmd="${bin_7z:?} e -aoa -o$(shquot "${dst}")"
            if ${cmd_stdout?}
            then
                cmd=" | ${cmd:?}"
            else
                cmd="${cmd:?} $(shquot "${src}")"
            fi
            cmdline=${cmdline:?}${cmd:?}
            cmd_stdout=false
            break
            ;;
        (*.bz2)
            cmd='bunzip2 -c'
            if ${cmd_stdout?}
            then
                cmd=" | ${cmd:?}"
            else
                cmd="${cmd:?} $(shquot "${src}")"
            fi
            cmd_stdout=true
            cmdline=${cmdline:?}${cmd:?}
            ;;
        (*.cpio)
            cmd='cpio -i'
            if ${cmd_stdout?}
            then
                cmd=" | ${cmd:?}"
            else
                cmd="${cmd:?} <$(shquot "${src}")"
            fi
            cmd_stdout=false
            cmdline=${cmdline:?}${cmd:?}
            ;;
        (*.gz)
            cmd='gunzip -c'
            if ${cmd_stdout?}
            then
                cmd=" | ${cmd:?}"
            else
                cmd="${cmd:?} $(shquot "${src}")"
            fi
            cmd_stdout=true
            cmdline=${cmdline:?}${cmd:?}
            ;;
        (*.lzma|*.xz)
            cmd='xz -d -c'
            if ${cmd_stdout?}
            then
                cmd=" | ${cmd:?}"
            else
                cmd="${cmd:?} $(shquot "${src}")"
            fi
            cmd_stdout=true
            cmdline=${cmdline:?}${cmd:?}
            ;;
        (*.pax)
            cmd='pax -r'
            if ${cmd_stdout?}
            then
                cmd=" | ${cmd:?}"
            else
                cmd="${cmd:?} <$(shquot "${src}")"
            fi
            cmd_stdout=false
            cmdline=${cmdline:?}${cmd:?}
            break
            ;;
        (*.rar)
            if ${cmd_stdout?}
            then
                # TODO: error or implement functionality
                exit 1
            fi
            cmd="unrar x -o+ $(shquot "${src}") $(shquot "${dst}/")"
            cmd_stdout=false
            cmdline=${cmdline:?}${cmd:?}
            break
            ;;
        (*.xar)
            cmd='xar -x'
            if ${cmd_stdout?}
            then
                cmd=" | ${cmd:?}"
            else
                cmd="${cmd:?} -f $(shquot "${src}")"
            fi
            cmd_stdout=false
            cmdline=${cmdline:?}${cmd:?}
            break
            ;;
        (*.Z)
            case ${os}
            in
                (alpine)
                    # use gzip(1)
                    cmd='gunzip -k'
                    if ${cmd_stdout?}
                    then
                        cmd=" | ${cmd:?}"
                    else
                        cmd="${cmd:?} $(shquot "${src}")"
                    fi
                    ;;
                (*)
                    # TODO: compatibility with AIX (possibly other) uncompress implementations
                    cmd="uncompress -f -k"
                    if ${cmd_stdout?}
                    then
                        cmd=" | ${cmd:?}"
                    else
                        cmd="${cmd:?} -- $(shquot "${src}")"
                    fi
                    ;;
            esac
            cmd_stdout=false
            cmdline=${cmdline:?}${cmd:?}
            break
            ;;
        (*.zip)
            if ${cmd_stdout?}
            then
                # TODO: error or implement functionality
                exit 1
            fi
            cmd="unzip -o $(shquot "${src}") -d $(shquot "${dst}")"
            cmd_stdout=false
            cmdline=${cmdline:?}${cmd:?}
            break
            ;;
        (*.zstd)
            cmd='zstd -d'
            if ${cmd_stdout?}
            then
                cmd=" | ${cmd:?}"
            else
                cmd="${cmd:?} <$(shquot "${src}")"
            fi
            cmd_stdout=true
            cmdline=${cmdline:?}${cmd:?}
            ;;
        (*)
            # TODO: error message (unsupported format)
            exit 1
            ;;
    esac
    f=${f%.*}
done
unset -v f

if [ -f "${__object:?}/parameter/backup-destination" ]
then
    backup_dst="${dst:?}.cdist__unpack_backup_$(date +%s)"
    echo "if [ -e $(quote "${dst}") ]; then mv $(quote "${dst}") $(quote "${backup_dst}"); fi"
    printf 'backed up %s to %s\n' "${dst}" "${backup_dst}" >>"${__messages_out:?}"
fi

echo "${cmd}"
printf 'unpacked to %s\n' "${dst}" >>"${__messages_out:?}"

if [ -f "${__object:?}/parameter/sum-file" ]
then
    sum_file=$(cat "${__object:?}/parameter/sum-file")
else
    sum_file="${src}.cdist__unpack_sum"
fi

echo "cksum '${src}' | awk '{ print \$1\$2 }' >'${sum_file}'"

if [ ! -f "${__object:?}/parameter/preserve-archive" ]
then
    echo "rm -f '${src}'"
    printf 'removed archive %s\n' "${src}" >>"${__messages_out:?}"
fi

if test -s "${__object:?}/parameter/onchange"
then
    cat "${__object:?}/parameter/onchange"
fi
