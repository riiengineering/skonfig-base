#!/bin/sh -e
#
# 2011-2014 Nico Schottelius (nico-cdist at schottelius.org)
#
# This file is part of skonfig-base.
#
# skonfig-base is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-base is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-base. If not, see <http://www.gnu.org/licenses/>.
#

if [ -f "${__object:?}/parameter/name" ]
then
    name=$(cat "${__object:?}/parameter/name")
else
    name=${__object_id:?}
fi

# Support installing from an URL
if [ -f "${__object:?}/parameter/url" ]
then
   install_name=$(cat "${__object:?}/parameter/url")
else
   install_name=${name}
fi


state_should=$(cat "${__object:?}/parameter/state")

os=$(cat "${__global:?}/explorer/os")
case ${os}
in
	(aix)
		yum=/opt/freeware/bin/yum
		opts='--assumeyes --quiet'
		;;
	(scientific|centos|almalinux|eurolinux|rocky|redhat|oraclelinux|amazon)
		opts='-y --quiet' ;;
	(*)
		opts='--assumeyes --quiet' ;;
esac

not_provided='^no package provides'
not_installed='is not installed$'

if grep -q "${not_provided}" "${__object:?}/explorer/pkg_version"
then
    if grep -q "${not_installed}" "${__object:?}/explorer/pkg_version"
    then
        state_is='absent'
    else
        state_is='present'
    fi
else
    state_is='present'
fi

[ "${state_is}" = "${state_should}" ] && exit 0

case ${state_should}
in
    (present)
        echo "${yum:-yum} ${opts} install '${install_name}'"
        echo 'installed' >>"${__messages_out:?}"
        ;;
    (absent)
        echo "${yum:-yum} ${opts} remove '${name}'"
        echo 'removed' >>"${__messages_out:?}"
        ;;
    (*)
        printf 'Invalid --state: %s\n' "${state_should}" >&2
        exit 1
        ;;
esac
