#!/bin/sh -e
#
# 2021,2023 Ander Punnar (ander at kvlt.ee)
# 2023-2025 Dennis Camera (dennis.camera at riiengineering.ch)
#
# This file is part of skonfig-base.
#
# skonfig-base is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# skonfig-base is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with skonfig-base. If not, see <http://www.gnu.org/licenses/>.
#

shquot() {
sed -e "s/'/'\\\\''/g" -e "1s/^/'/" -e "\$s/\$/'/" <<EOF
$*
EOF
}

command -v rsync >/dev/null 2>&1 || {
    echo 'rsync is not installed on the local machine' >&2
    exit 1
}

src=$(cat "${__object:?}/parameter/source")

test -e "${src}" || {
    printf 'source not found: %s\n' "${src}" >&2
    exit 1
}

if test -s "${__object:?}/parameter/destination"
then
    dst=$(cat "${__object:?}/parameter/destination")
else
    dst="/${__object_id:?}"
fi

# if source is directory, then make sure that
# source and destination are ending with slash,
# because this is what you almost always want when
# rsyncing two directories.

if test -d "${src}"
then
    case ${src}
    in
        (*/)
            ;;
        (*)
            src="${src}/" ;;
    esac

    case ${dst}
    in
        (*/)
            ;;
        (*)
            dst="${dst}/" ;;
    esac
fi

remote_user=$(cat "${__object:?}/parameter/remote-user")

if test -f "${__object:?}/parameter/no-defaults"
then
	options=''
elif test -f "${__object:?}/parameter/options"
then
	# deprecated parameter, used to be used to set default rsync options
	options=$(cat "${__object:?}/parameter/options")
else
	options='--links --perms --recursive --times'
fi

if test -f "${__object:?}/parameter/option"
then
    while read -r l
    do
        # there's a limitation in argparse: value can't begin with '-'.
        # to workaround this, let's prefix opts with '\' in manifest and remove here.
        # read more about argparse issue: https://bugs.python.org/issue9334

        options="${options} ${l#\\}"
    done <"${__object:?}/parameter/option"
fi

if test -f "${__object:?}/parameter/owner" || test -f "${__object:?}/parameter/group"
then
    options="${options} --chown="

    if test -f "${__object:?}/parameter/owner"
    then
        owner=$(cat "${__object:?}/parameter/owner")
        options="${options}$(shquot "${owner}")"
    fi

    if test -f "${__object:?}/parameter/group"
    then
        group=$(cat "${__object:?}/parameter/group")
        options="${options}:$(shquot "${group}")"
    fi
fi

if test -f "${__object:?}/parameter/mode"
then
    mode=$(cat "${__object:?}/parameter/mode")
    options="${options} --chmod=$(shquot "${mode}")"
fi

# IMPORTANT
#
# 1. we first dry-run rsync with change summary to find out
#    if there are any changes and code generation is needed.
# 2. normally, to get current state or target host, we run
#    such operations in type explorers, but that's not
#    possible due to how rsync works.
# 3. redirecting output of dry-run to stderr to ease debugging.
# 4. to understand how that cryptic regex works, please
#    open rsync manpage and read about --itemize-changes.

export RSYNC_RSH="${__remote_exec:?}"

# eval $options into $@ to allow --option to contain quoted shell arguments,
# e.g. for use with rsync's --filter.
eval "set -- ${options}"

# shellcheck disable=SC2086
if ! rsync --dry-run --itemize-changes "$@" "${src}" "${remote_user}@${__target_host:?}:${dst}" \
    | grep -e '^[<>ch.*][fdLDS][cstTpogunbax.+?]\{7,\} ' -e '^\*deleting ' >&2
then
    exit 0
fi

printf 'export RSYNC_RSH=%s\n' "$(shquot "${__remote_exec:?}")"
printf 'rsync%s %s %s@%s:%s\n' \
    "${options:+ ${options# }}" \
    "$(shquot "${src}")" \
    "$(shquot "${remote_user}")" \
    "$(shquot "${__target_host:?}")" \
    "$(shquot "${dst}")"

echo 'synced' >>"${__messages_out:?}"
